/**
 * Bound Event(s) Plugin
 *
 * @version 1.0
 * @requires jQuery v1.3
 * @author Kevan Davis
 * @copyright Copyright (c) 2009, Gilt Groupe
 *
 * Distributed under the terms of the GNU General Public License
 * http://www.gnu.org/licenses/gpl-3.0.html
 *
 * @description :
 *
 * Returns an array of events bound to an element
 * If a type is passed in, returns only that type.
 *
 * CSS Pseudo Selector :bound(eventType) returns elements that have events of a certain type (or types)
 *
 * Also supports namespaced events, and live events
 *
 * @usage :
 * $('#blah').bound('click') -- returns all functions bound to the click event on #blah
 * $('#blah').bound() -- returns all functions bound to any event on #blah
 * $('.blah').bound('.test') -- returns all functions bound to the test namespace on the first element with class blah
 * $('.blah:bound(click.test)') -- returns all elements with class blah that have a click handler in namespace test
 */
(function(e){e.fn.bound=function(a){var f=null,b,c,g,d;if(a)if(a&&0===a.indexOf(".")){f=a.substr(1);a=null}else if(-1!==a.indexOf(".")){b=a.split(".");f=b[1];a=b[0]}b=e(this).data("events");if(c=e(document).data("events"))c=c.live;if(!b&&!c)return[];if(a){b=b?b[a]||[]:[];if(c)if(c=e(document).data("events")[a])for(a=0;a<c.length;a+=1)c[a].hasOwnProperty("selector")&&e(c[a].selector).filter(this).length&&b.push(c[a])}else{g=b;b=[];for(d in g)if(g.hasOwnProperty(d))for(a=0;a<g[d].length;a+=1)b.push(g[d][a]); if(c){c=e(document).data("events");for(d in c)if("live"!==d&&c.hasOwnProperty(d))for(a=0;a<c[d].length;a+=1)c[d][a].hasOwnProperty("selector")&&e(c[d][a].selector).filter(this).length&&b.push(c[d][a])}}d=[];for(a=0;a<b.length;a+=1)if(!f||b[a].namespace===f)d.push(b[a]);return d};e.extend(e.expr[":"],{bound:function(a,f,b){f=false;var c;if(b&&b[3]){b=b[3].split(",");for(c=b.length;c;){c-=1;if(e(a).bound(b[c].trim()).length){f=true;break}}}else if(e(a).bound().length)f=true;return f}})})(jQuery);
